name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (dev/prod)'
        required: true
        default: 'dev'

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          python manage.py test

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-image-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Set image tag
        id: set-image-tag
        run: |
          echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PACKAGES_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_REGISTRY }}/heyb-web:${{ steps.set-image-tag.outputs.tag }}

  deploy-dev:
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v3
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
      - name: Update ArgoCD Application
        run: |
          envsubst < argocd/heyb-dev-application.yaml | argocd app create --upsert -f -
          IMAGE_REGISTRY=${{ env.IMAGE_REGISTRY }} IMAGE_TAG=${{ needs.build.outputs.image-tag }} argocd app set heyb-dev --kustomize-image=${{ env.IMAGE_REGISTRY }}/heyb-web:${{ needs.build.outputs.image-tag }}
          argocd app sync heyb-dev --prune

  deploy-prod:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    needs: build
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v3
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
      - name: Update ArgoCD Application
        run: |
          envsubst < argocd/heyb-prod-application.yaml | argocd app create --upsert -f -
          IMAGE_REGISTRY=${{ env.IMAGE_REGISTRY }} IMAGE_TAG=${{ needs.build.outputs.image-tag }} argocd app set heyb-prod --kustomize-image=${{ env.IMAGE_REGISTRY }}/heyb-web:${{ needs.build.outputs.image-tag }}
          argocd app sync heyb-prod --prune 